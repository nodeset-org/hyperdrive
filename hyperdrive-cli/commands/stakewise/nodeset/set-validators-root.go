package nodeset

import (
	"fmt"

	"github.com/nodeset-org/hyperdrive/hyperdrive-cli/client"
	clituils "github.com/nodeset-org/hyperdrive/hyperdrive-cli/utils"
	"github.com/nodeset-org/hyperdrive/hyperdrive-cli/utils/tx"
	"github.com/rocket-pool/node-manager-core/utils/input"
	"github.com/urfave/cli/v2"
)

var validatorsRootFlag *cli.StringFlag = &cli.StringFlag{
	Name:    "root",
	Aliases: []string{"r"},
	Usage:   "The new root for the validators Merkle Tree, generated by the Stakewise Operator `get-validators-root` command",
}

func setValidatorsRoot(c *cli.Context) error {
	// Get the client
	hd := client.NewHyperdriveClientFromCtx(c)
	sw := client.NewStakewiseClientFromCtx(c)

	// Get the root
	rootString := c.String(validatorsRootFlag.Name)
	if rootString == "" {
		rootString = clituils.Prompt("Please enter the root of the aggregated validator deposit data Merkle tree:", "^0x[0-9a-fA-F]{64}$", "Invalid hash format")
	}
	root, err := input.ValidateHash("root", rootString)
	if err != nil {
		return err
	}

	// Build the TX
	response, err := sw.Api.Nodeset.SetValidatorsRoot(root)
	if err != nil {
		return err
	}

	// Run the TX
	validated, err := tx.HandleTx(c, hd, response.Data.TxInfo,
		"Are you sure you want to set the validators root?",
		"setting validators root",
		"Setting the validators root...",
	)
	if err != nil {
		return err
	}
	if !validated {
		return nil
	}

	// Log & return
	fmt.Println("Validators root successfully set.")
	return nil
}
