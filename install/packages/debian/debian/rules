#!/usr/bin/make -f

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# We're targeting just the CLI for this package
export BUILD_DIR := _build
export DH_GOLANG_BUILDPKG := github.com/nodeset-org/hyperdrive/hyperdrive-cli

# Set up the golang variables because dh-golang defaults to them being unset, which breaks things
export GO111MODULE := on
export GOPROXY := https://goproxy.io,direct

# Pass building to dh-golang
%:
	dh $@ --builddirectory=${BUILD_DIR}

# We have a very nonstandard build process; we're changing the name of the binary from hyperdrive-cli to hyperdrive,
# and we're using CGO_ENABLED=0... neither of which the default dh-golang system can handle. Thus, we're completely
# rolling our own build here and ignoring the dh-golang one entirely.
override_dh_auto_build:
#	Build the CLI with a vanilla build instead of installing it
	mkdir -p ${BUILD_DIR}
	cd ${BUILD_DIR} && CGO_ENABLED=0 GOOS=linux GOARCH=${DEB_TARGET_ARCH} go build -trimpath -v -o hyperdrive github.com/nodeset-org/hyperdrive/hyperdrive-cli
#	For whatever reason, go install will install into bin/$GOOS_$GOARCH if we're cross compiling so we have to emulate that here
	if [ "${DEB_BUILD_ARCH}" = "${DEB_TARGET_ARCH}" ]; then \
		mkdir -p ${BUILD_DIR}/bin && \
		mv ${BUILD_DIR}/hyperdrive ${BUILD_DIR}/bin/; \
	else \
		mkdir -p ${BUILD_DIR}/bin/linux_${DEB_TARGET_ARCH} && \
		mv ${BUILD_DIR}/hyperdrive ${BUILD_DIR}/bin/linux_${DEB_TARGET_ARCH}/; \
	fi

# Copy the CLI and deploy files during installation
override_dh_auto_install:
# Install the go binaries without the source copied over to /usr
	dh_auto_install -- --no-source
# Create the folder structure and copy the deploy files over
	install -dm 0700 debian/hyperdrive/var/lib/hyperdrive/data
	install -dm 0700 debian/hyperdrive/var/lib/hyperdrive/global
	mkdir -p debian/hyperdrive/usr/share/hyperdrive/
	cp -r deploy/* debian/hyperdrive/usr/share/hyperdrive/
	chmod -R +x debian/hyperdrive/usr/share/hyperdrive/scripts

override_dh_auto_test:
